[
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This chapter contains introduction to IIR, Scientific Services and Science Centers"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MHIF IIR Reference",
    "section": "",
    "text": "This is a Quarto book with references of IIR workflows and processes"
  },
  {
    "objectID": "refIRBPrep.html",
    "href": "refIRBPrep.html",
    "title": "2  IRB Preparation",
    "section": "",
    "text": "This section details the IRB preparation process for IIR studies."
  },
  {
    "objectID": "refIRBPrep.html#overview",
    "href": "refIRBPrep.html#overview",
    "title": "2  IRB Preparation",
    "section": "2.1 Overview",
    "text": "2.1 Overview\n1. You will receive an email from Larissa containing the study name, basic information, and a link to the project folder.\n\n\n\nExample Email\n\n\n2. Locate the project folder in the S-drive. The folder should be pre-populated with all necessary files and templates.\n\n\n\nProject Folder\n\n\n3. Ultimately, the following documents must be completed (each form will be addressed individually below).\nFor a single-center study:\n\nProtocol\nApplication Part 2\nMOA\nPI Attestation\nPSD Form (only fill out if requested)\nDOA\nData Sheet/Variable List (if not in protocol)\n\nFor a multi-center study in which we are the coordinating center:\n\nProtocol\nApplication Part 2\nMOA\nPI Attestation\nPSD Form (only fill out if requested)\nDOA\nData Sheet/Variable List (if not in protocol)\nCollaborative Research Supplement\nData Use Agreement (does not need to be submitted but must be completed prior to submission)\n\nFor a multi-center study in which we are a participating center:\n\nApplication Part 2\nMOA\nPI Attestation\nPSD Form (only fill out if requested)\nIRB Study Approval Letter (from coordinating center)\nProtocol (from coordinating center)\nIn the unlikely event that our role in the study does not align with the coordinating center’s protocol, our own protocol is required.\nData Use Agreement (does not need to be submitted but must be completed prior to submission)\n\n4. Locate the project application. It should be found in the folder titled “Project Proposal, Feasibility, Contract, Budget, Progress.”\n5. Use information contained in the project application to fill out the protocol and application part 2. Reach out to study personnel listed in the project application for clarification if necessary (e.g. variable list, estimated sample size, etc.). Save the completed application part 2 to the “1 IRB Submissions” folder and the completed protocol to the “3 Protocol, DOA” folder.\n6. Fill out necessary fields in PI Attestation, print a copy, and place it in a folder with the physician’s name on it and your name as the return address. Give the folder to Rhoda or Svetlana to deliver to the physician. Upon receipt of the signed form, scan and save the file to the “1 IRB Submissions” folder.\n7. Fill out necessary fields in the MOA and send to Kris Fortman (KFortman@mhif.org). In the email, be sure to include the name of the study, the PI, and the following sections from the protocol:\n\nIntroduction - Background and Rationale\nStudy Objectives, Purpose, or Study Aims\nStudy Design\n\nUpon receipt of the signed form, save the file to the “1 IRB Submissions” folder.\n8. Fill out the DOA form using the list of study personnel from the project application.\n\nThe PI should be listed as “PI” with tasks 1, 2, 3, 4\nOther MHI Physicians should be listed as “Co-I” with tasks 1, 2, 3, 4\nThe research coordinator should be listed as “RC” with task 1\nResearch scholars and research associates should be listed as “RA” with tasks 2, 3, 4\nRoss, Larissa, and biostatisticians should be listed as “RA” with tasks 2, 3, 4, 5\nThe regulatory team should be listed as “REG” with tasks 18, 19\n\n9. Upon completion of all necessary forms, email Laura (laura.winters@allina.com) to let her know IRB prep is complete."
  },
  {
    "objectID": "refIRBPrep.html#protocol",
    "href": "refIRBPrep.html#protocol",
    "title": "2  IRB Preparation",
    "section": "2.2 Protocol",
    "text": "2.2 Protocol\n1. A protocol template should be pre-populated in the “3 Protocol, DOA” folder. If it is not, the template can be found at in the S drive under “Metro -> ANW -> Research -> Coordinator & Regulatory Resources -> Templates - All Types -> IIR Templates, Checklists, and other Tools -> Protocol Templates”.\n2. Rename protocol with study short title (e.g. Cardiopregnancy Protocol)\n3. Open protocol template and follow the italicized directions on the protocol template. Most necessary information should be contained in “IIR Project Application” (study proposal) located in the “2 Project Proposal, Feasibility, Contract, Budget, Progress” folder. The project application should contain all necessary information for the following sections:\n\nIntroduction\nStudy Objectives\nStudy Design\nSelection of Subjects\nData Elements\nMethods\n\nIf any information is missing, contact research coordinator or other study personnel for guidance. Study personnel, including the research coordinator, are listed in the study proposal.\n4. Delete instructions upon completion (this is includes bolded text and bullet points found throughout the protocol).\n5. Important aspects of each protocol to pay attention to:\n\nIs the study retrospective, prospective, or both? Please clearly state this information in the “Study Design” section.\nWhat are the dates of investigation? Please clearly state the date range in which patients will be identified in the “Study Design” section, including any follow-up times.\nWhat is the number of patients expected? Please use descriptors like “around” or overestimate to allow for flexibility.\nWill the data be stored in Excel or REDCap? Please choose stock language accordingly.\nWhat is the justification for a HIPAA waiver? Please choose based on sample size, either less than 50 or greater than 50.\nWhat is the benefit of the study for study participants? Please use stock language in the protocol and adjust for the specific study.\nDoes the study utilize pre-existing databases or registries? If using data from another study, or a preceding registry, include the IRB number of that study and include this in the section “Research Databases, Existing Study Data Sets or Registries to be Utilized”\nThe variable list should be included in “Appendix A: Data Collection Form.” If no variable list is present, please reach out to the research coordinator for a copy.\n\n6. Other notes:\n\nDelete instructions at the end of the protocol after the appendix form.\nDe-italicize any stock language that has been kept.\nUpdate the footer to include short title, protocol version, and date.\nConfirm protocol is saved in the folder titled “3 Protocol, DOA”.\nIf you are unsure how to proceed, consult a similar study’s protocol as a guide. Alternatively, reach out to another RA or a member of the regulatory team.\nUpon completion, send the protocol to the PI and have them review for accuracy."
  },
  {
    "objectID": "refIRBPrep.html#application-part-2",
    "href": "refIRBPrep.html#application-part-2",
    "title": "2  IRB Preparation",
    "section": "2.3 Application Part 2",
    "text": "2.3 Application Part 2\n1. A template for Application Part 2 should be pre-populated in the “1 IRB Submissions” folder. If it is not, the template can be found at IRBnet.org -> Forms and Templates. For a chart review study, use “Form - Application 2 - Retrospective/Prospective Chart Reviews.”\n\n\n\nForms and Templates in Left-hand Menu Bar\n\n\n2. Some sections of Application Part 2 contain the same information as the protocol. Please refer to the chart below to fill out relevant sections:\n\n\n\n\n\n\n\nApplication Part 2 Section\nCorresponding Protocol Section\n\n\n\n\n\nData Sources and Confidentiality, a.\n\n\nMethods, A. Data Source\n\n\n\n\nData Sources and Confidentiality, d.\n\n\nMethods, C. Data Transfer & Storage AND D. Data Sources and Confidentiality\n\n\n\n\nData Sources and Confidentiality, f., ii.\n\n\nMethods, A. Data Source\n\n\n\n\nHIPAA Authorization, b., i.\n\n\nHIPAA Authorization (HIPAA Authorization - Waiver Request and Justification)\n\n\n\n\nHIPAA Authorization, b., ii.\n\n\nHIPAA Authorization (HIPAA Authorization - Waiver Request and Justification)\n\n\n\n\nHIPAA Authorization, b., iii.\n\n\nMethods, E. Data Retention and Destruction\n\n\n\n\n3. Save completed form to the project folder in “1 IRB Submissions.”"
  },
  {
    "objectID": "stats.html",
    "href": "stats.html",
    "title": "4  Basic Statistics",
    "section": "",
    "text": "This section of the guidebook will discuss general statistical concepts that would be helpful in any IIR projects. Each subsection includes further readings for each topic. If you’re interested in learning more about the concepts, we suggest taking a look at the resources."
  },
  {
    "objectID": "stats.html#basic-statistics",
    "href": "stats.html#basic-statistics",
    "title": "3  Statistics",
    "section": "3.1 Basic Statistics",
    "text": "3.1 Basic Statistics\n\n3.1.1 Variable types\n\nCategorical - a categorical variable is a variable that has one or more categories. It can be a binary variable (e.g. yes/no question) or a non-binary variable (e.g. hair color with categories “red”, “blonde”, “brown”, etc.)\na. Nominal - a nominal variable is a categorical variable where the ordering of categories does not matter. An example would be the hair color variable from above.\nb. Ordinal - For ordinal variables, the ordering of categories matter. For example, service rating with categories “excellent”, “satisfactory”, and “bad” would be ordinal. In this case there is natural ordering between the categories “excellent” being the highest service rating and “bad” being the lowest.\nNumeric - a numeric variable is a variable that is quantifiable. i.e. the values must be numbers.\na. Interval - in simple terms, an interval variable is the one where the intervals between the values are equally spaced. That is, difference between two values is meaningful. Also there is ordering of the values. For example, temperature is an interval variable. 1. there is ordering, higher temperature means warmer weather. 2. The difference between two values mean the same magnitude of difference across different intervals. The difference between 36 and 37 degrees means 1 degree difference in the magnitude of warmth/coldness. This 1 degree difference represents the same magnitude on any other intervals. (e.g. 40 and 41, 59 and 60, etc.)\nAnother characteristic of interval variable is that the meaning of zero can be different by scales. For instance, on the Celsius scale, 0 is the freezing point; on the Fahrenheit scale, the 0 is 32 degrees below the freezing point.\nb. Ratio - a ratio variable has is basically the same as interval variable except that it has a real absolute zero. That is, the zero value means there is no value for the variable being measured. Examples include weight, time in seconds, height, volume, etc.\nc. Continuous - a continuous variable is a variable with an infinite number of real values within a given interval. For example, height is a continuous variable. A person may be 181.192 cm tall or 181.14205 cm tall, etc. There is infinite number of values between 181 cm and 182 cm. A continuous varialbe includes both interval and ratio variables.\nd. Discrete - a discrete variable is a variable with a finite number of real values within a given interval. Its values are countable. An example is a person’s age. A person can be 12 years old. We don’t normally say a person is 12.5 or 12.7 years old. There is a finite number of values for a person’s age.\n\nFurther resources:\n1. UCLA\n2. Statistics Canada\n3. UTHealth"
  },
  {
    "objectID": "stats.html#useful-r-tips",
    "href": "stats.html#useful-r-tips",
    "title": "3  Statistics",
    "section": "Useful R tips",
    "text": "Useful R tips\n\n3.1.2 Copy a column from a data frame to another with matching IDs\nSuppose you have 2 data frames that are different in size. They share the same ID’s but the number of rows are different. Your goal is to copy one column from one data frame to another and you want the ID’s to match.\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n\nA <- tribble(\n  ~id, ~year, ~GPA,\n  101, 2011, 3.5,\n  102, 2010, 3.6,\n  103, 2012, 2.8,\n  104, 2017, 3.8,\n  105, 2016, 2.6,\n  101, 2019, 3.7,\n  103, 2021, 2.5\n)\n\nB <- tribble(\n  ~id, ~name, ~school,\n  104, \"Jane Doe\",\"Oakhill Academy\",\n  101, \"John Smith\", \"Faireview International School\",\n  103, \"James Lee\", \"Redwood College\",\n  102, \"Jordan Jones\", \"Lakeville University\",\n  105, \"Julia Garcia\", \"Mountainview Institute\"\n)\nA\n\n# A tibble: 7 × 3\n     id  year   GPA\n  <dbl> <dbl> <dbl>\n1   101  2011   3.5\n2   102  2010   3.6\n3   103  2012   2.8\n4   104  2017   3.8\n5   105  2016   2.6\n6   101  2019   3.7\n7   103  2021   2.5\n\nB\n\n# A tibble: 5 × 3\n     id name         school                        \n  <dbl> <chr>        <chr>                         \n1   104 Jane Doe     Oakhill Academy               \n2   101 John Smith   Faireview International School\n3   103 James Lee    Redwood College               \n4   102 Jordan Jones Lakeville University          \n5   105 Julia Garcia Mountainview Institute        \n\n\nSuppose your goal was to copy the column name from B to A only. A naive approach for this task would be to use mutate in the following way. However, this will generate an error.\n\nC <- A |> mutate(name_from_b = B[, \"name\"])\n\nError in `mutate()`:\n! Problem while computing `name_from_b = B[, \"name\"]`.\n✖ `name_from_b` must be size 7 or 1, not 5.\n\n\nSince the number of rows are different for the data frames A and B, name cannot be copied. Remember the goal is to copy the column so that the ID’s are matching. To make this work, we will use the function match and data frame indexing with brackets []. First, we will explore how the match function works.\nmatch takes in vectors and returns the indices of the first argument that matches the second argument. For instance match(x, y) would return the indices of x’s elements that are matching the elements of y in the correct order.\n\nmatch(B$id, A$id)\n\n[1] 4 1 3 2 5\n\nmatch(A$id, B$id)\n\n[1] 2 4 3 1 5 2 3\n\n\nNotice that the function still returns the indices of the matches even if the arguments of its arguments have differing lengths. If the arguments have differing lengths, the result of match will be the length of the first argument. The first example match(B$id, A$id) returns only 5 indices and these are the positions of the matches of B’s Id in A. The second example returns 7 elements in the same manner. Now we can use this to create a new vector names_from_b to be copied to A. This will be an easy task with data frame indexing using the brackets []. Inside the brackets will be the matches of A’s ID in B so that there would be 7 elements.\n\nnames_from_b <- B$name[match(A$id, B$id)]\nnames_from_b\n\n[1] \"John Smith\"   \"Jordan Jones\" \"James Lee\"    \"Jane Doe\"     \"Julia Garcia\"\n[6] \"John Smith\"   \"James Lee\"   \n\n\nThe final step is to copy this vector into A. We will store the result in a new data frame called C.\n\nC <- A |> mutate(names = names_from_b)\nC\n\n# A tibble: 7 × 4\n     id  year   GPA names       \n  <dbl> <dbl> <dbl> <chr>       \n1   101  2011   3.5 John Smith  \n2   102  2010   3.6 Jordan Jones\n3   103  2012   2.8 James Lee   \n4   104  2017   3.8 Jane Doe    \n5   105  2016   2.6 Julia Garcia\n6   101  2019   3.7 John Smith  \n7   103  2021   2.5 James Lee   \n\n\n\n\n3.1.3 How to access column names in a loop or a function with dplyr\nIn base R, we need $ to refer to variables/columns of a data frame in most cases. This often leads to repetition of typing the same data frame’s name many times. For example:\n\nmtcars[mtcars$mpg > mean(mtcars$mpg) & mtcars$gear == 4,]\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nIn dplyr, a concept called data masking allows for much faster data manipulation and reduces such repetition of code. In short, data masking allows you to simply type only the name of variable instead of accessing the variable through $ operator. The code above could be reduced to this using dplyr’s filter():\n\nmtcars |> filter(mpg > mean(mpg) & gear == 4)\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nHowever, when working with data masked variables, it is somewhat challenging to create functions and loops. It will usually throw an error if you try to use the data masked variables as is without manipulation. Suppose you wanted to create histogram of each variable in a dataset. You may do so by creating a histogram one by one. However, a more efficient way to complete this task would be to come up with some kind of a loop or a function. Here is an example attempt:\n\nfor (var in names(mtcars)){\n  plots <- mtcars |> ggplot(aes(x = var)) + geom_histogram()\n  print(plots)\n}\n\nError in `f()`:\n! StatBin requires a continuous x variable: the x variable is discrete.Perhaps you want stat=\"count\"?\n\n\n\n\n\nThe above code throws an error - the part aes(x = var) does not recognize the variable names we supplied to the function. var is just the names of the variables in mtcars stored in strings. To resolve this error, we need to access the masked variables. We can do so by indexing the .data pronoun with the variable names. The syntax would be .data[[varname]].\n\n\nfor (var in names(mtcars)){\n  plots1 <- mtcars |> ggplot(aes(x = .data[[var]])) + geom_histogram()\n  print(plots1)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(reference: vignette(\"programming\") )"
  },
  {
    "objectID": "02-iir-study-cycle.html",
    "href": "02-iir-study-cycle.html",
    "title": "2  IIR Study Cycle",
    "section": "",
    "text": "Study Start Up:\nThis process will includes an application review by a research sub-committee. Once the IIR team receives the application, it is our job to complete the protocol and any supporting IRB forms (DOA, MOA, etc…). Please refer to the Protocol writing section to get clarification on how to complete these forms.\nData Collection & Management:\nOnce the IRB has approved the study and we have been granted permission to work on the project, it is important to build a database for the data. Depending on what is stated in the protocol, you will either create an Excel file or a REDCap to house the data.\nExcel:\nIf you are using Excel please create a masterkey folder and a deidentified folder. The MasterKey folder should include an excel file with a numbered patient ID list attached to the MRN. The Deidentified excel file should include the numbered patient ID and your data.\nREDCap:\nREDCap is one of our main data management tools on the IIR team. We use this to collect and store patient information. Please refer to the REDCap section to learn more about building a REDCap and managing your data.\nStatistics:\nAs you gather your data and complete data collection, the IIR team also has multiple statisticians on the team that can help with analysis of your data. Please meet with any statistician who is approved to work on your study for further analysis of your data. If they are not approved, please send in an amendment for their IRB approval. The Stats team can help with analysis, data modeling, summary displays, predictive models and plots. They are a great resource to help with analysis of your data.\nPublication:\nThis part of the cycle involves the culmination of all the hard work put into the project. Writing a manuscript will involve multiple drafts and revisions. You may be required to go back to gather more data or change your analysis.\nDissemination:\nCongratulations! You’re work has either been accepted by a journal and/or presenting your findings at a conference.\n<<<<<<< Updated upstream # IIR Study Process\n\n======= \nIIR Study Process\n\n\n\n\n\n\n\nStashed changes 1. To conduct a study, the PI sends to IIR (FAO Larissa Stanberry, LS) the budget and application forms\n\n\n\n\n\n\n\na.  The budget form is prefilled for a typical project and includes only IIR expenses (not scholars or PI time). The only numbers to edit would be for Study Execution, i.e. if the study requires RA support to help with data abstraction or includes more complicated analysis.\n\nIIR iterates with PI to clarify various study design and budget calculations.\nWhen the forms are finalized, the proposal is sent to the subcommittee to review. Any questions from the committee are communicated to the PIs.\n\nCommittee members: Drs Sharkey, Miedema, Bennett, Bank, Traverse\n\nOnce the project is approved, the IIR team uses the application form as basis for drafting an IRB protocol. This takes 1-2 weeks depending on additional information is required.\nThe protocol draft is sent to the PI team for a review. At the same time, PI receives request for signatures for other documents in the IRB package.\nThe protocol is amended following PI comments.\nThen, the IRB package goes to the MHIF regulatory team who will review it from the regulatory perspective and may come back if they have any further questions.\nFinally, our regulatory team submits the project to Allina IRB. The review takes about 4-6 weeks, unless the project is exempt in which case it's about 2 weeks. The timeline depends on the Allina capacity at that moment.\nOnce the project is approved, the IIR will work with the PI team to set up a REDCap database for the data collection.\nRAs and scholars can help with data collection.\nOne the data collection are finalized, the project statistician will conduct the analysis. The project statistician also helps interpret the results, write methods, and address the reviewers' comments."
  },
  {
    "objectID": "iir_study_cycle.html",
    "href": "iir_study_cycle.html",
    "title": "2 IIR Study Cycle",
    "section": "",
    "text": "2.1 Project Start Up\n\nIdea is propose and is sent to either Larissa Stanberry or Ross Garberich. IIR project request form is filled out. IIR project intake form is filled out. Study budget form is filled out.\nProposal Gets sent to Sub-Committee Member. Gets approved by Sub-committee member. If not approved, review action items, communicate with PI and resubmit if PI desires.\nIRB Submission. Typically research associates will complete this.\nIRB Approved. Study Starts.\n\n\nData\n\nREDCap or Excel created to manage the data. Work with scientific services team (IIR Team) for building of REDCap if needed.\nDetermine source of the data.\nCollect data and store in either REDCap or Excel, based on the project protocol.\n\n\n\nStats\n\nCollected Data is handed off to Biostatisticians.\nMeet regularly with the Stats team to discuss findings, tables, graphs, figures, etc…\n\n\n\nPublication\n\nManuscript/Abstract Writing is done here.\nConsult with research team about findings and message. Submit to desired journal.\n\n\n\nDissemination\n\nOnce published, the manuscript/abstract will be collected into our data base for dissemination.\nPresentations at conferences may also be an opportunity for dissemination of the project.\n\n\n\n\n2.2 Research Project Cycle\n\n\nStudy Intake\n\nEach project starts with an idea!\nSubmit your proposal & budget to IIR for initial review\n\n\n\nResearch Committee\n\nReviews the proposal and decides on approval\n\n\n\nIIR & Regulatory\n\nIIR team prepares an IRB submission.\nPI team reviews the draft.\nMHIF regulatory reviews and submits to Allina IRB\n\n\n\nAllina IRB\n\nReview the submitted study.\nReview process takes 4-6 weeks\nMHIF has no control over it\n\n\n\nData management\n\nIIR helps with data pulls from EDW\nIIR sets up REDCap database and can assist with data abstraction\nData abstraction requires strict adherence to protocol\nAny additional variables, aims or changes, require IRB amendment\n\n\n\nData Analysis\n\nStat team provide statistical support\nWork with the statistician to analyze data, interpret results, prepare manuscripts\n\n\n\nDisseminations\n\nIIR Team can assist with abstracts, posters, and manuscripts\nYour publications appear on our monthly publications list"
  },
  {
    "objectID": "stats.html#useful-r-programming-tips",
    "href": "stats.html#useful-r-programming-tips",
    "title": "3  Statistics",
    "section": "Useful R Programming Tips",
    "text": "Useful R Programming Tips\n\n3.1.2 Copy a column from a data frame to another with matching IDs\nSuppose you have 2 data frames that are different in size. They share the same ID’s but the number of rows are different. Your goal is to copy one column from one data frame to another and you want the ID’s to match.\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n\nA <- tribble(\n  ~id, ~year, ~GPA,\n  101, 2011, 3.5,\n  102, 2010, 3.6,\n  103, 2012, 2.8,\n  104, 2017, 3.8,\n  105, 2016, 2.6,\n  101, 2019, 3.7,\n  103, 2021, 2.5\n)\n\nB <- tribble(\n  ~id, ~name, ~school,\n  104, \"Jane Doe\",\"Oakhill Academy\",\n  101, \"John Smith\", \"Faireview International School\",\n  103, \"James Lee\", \"Redwood College\",\n  102, \"Jordan Jones\", \"Lakeville University\",\n  105, \"Julia Garcia\", \"Mountainview Institute\"\n)\nA\n\n# A tibble: 7 × 3\n     id  year   GPA\n  <dbl> <dbl> <dbl>\n1   101  2011   3.5\n2   102  2010   3.6\n3   103  2012   2.8\n4   104  2017   3.8\n5   105  2016   2.6\n6   101  2019   3.7\n7   103  2021   2.5\n\nB\n\n# A tibble: 5 × 3\n     id name         school                        \n  <dbl> <chr>        <chr>                         \n1   104 Jane Doe     Oakhill Academy               \n2   101 John Smith   Faireview International School\n3   103 James Lee    Redwood College               \n4   102 Jordan Jones Lakeville University          \n5   105 Julia Garcia Mountainview Institute        \n\n\nSuppose your goal was to copy the column name from B to A only. A naive approach for this task would be to use mutate in the following way. However, this will generate an error.\n\nC <- A |> mutate(name_from_b = B[, \"name\"])\n\nError in `mutate()`:\n! Problem while computing `name_from_b = B[, \"name\"]`.\n✖ `name_from_b` must be size 7 or 1, not 5.\n\n\nSince the number of rows are different for the data frames A and B, name cannot be copied. Remember the goal is to copy the column so that the ID’s are matching. To make this work, we will use the function match and data frame indexing with brackets []. First, we will explore how the match function works.\nmatch takes in vectors and returns the indices of the first argument that matches the second argument. For instance match(x, y) would return the indices of x’s elements that are matching the elements of y in the correct order.\n\nmatch(B$id, A$id)\n\n[1] 4 1 3 2 5\n\nmatch(A$id, B$id)\n\n[1] 2 4 3 1 5 2 3\n\n\nNotice that the function still returns the indices of the matches even if the arguments of its arguments have differing lengths. If the arguments have differing lengths, the result of match will be the length of the first argument. The first example match(B$id, A$id) returns only 5 indices and these are the positions of the matches of B’s Id in A. The second example returns 7 elements in the same manner. Now we can use this to create a new vector names_from_b to be copied to A. This will be an easy task with data frame indexing using the brackets []. Inside the brackets will be the matches of A’s ID in B so that there would be 7 elements.\n\nnames_from_b <- B$name[match(A$id, B$id)]\nnames_from_b\n\n[1] \"John Smith\"   \"Jordan Jones\" \"James Lee\"    \"Jane Doe\"     \"Julia Garcia\"\n[6] \"John Smith\"   \"James Lee\"   \n\n\nThe final step is to copy this vector into A. We will store the result in a new data frame called C.\n\nC <- A |> mutate(names = names_from_b)\nC\n\n# A tibble: 7 × 4\n     id  year   GPA names       \n  <dbl> <dbl> <dbl> <chr>       \n1   101  2011   3.5 John Smith  \n2   102  2010   3.6 Jordan Jones\n3   103  2012   2.8 James Lee   \n4   104  2017   3.8 Jane Doe    \n5   105  2016   2.6 Julia Garcia\n6   101  2019   3.7 John Smith  \n7   103  2021   2.5 James Lee   \n\n\n\n\n3.1.3 How to access column names in a loop or a function with dplyr\nIn base R, we need $ to refer to variables/columns of a data frame in most cases. This often leads to repetition of typing the same data frame’s name many times. For example:\n\nmtcars[mtcars$mpg > mean(mtcars$mpg) & mtcars$gear == 4,]\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nIn dplyr, a concept called data masking allows for much faster data manipulation and reduces such repetition of code. In short, data masking allows you to simply type only the name of variable instead of accessing the variable through $ operator. The code above could be reduced to this using dplyr’s filter():\n\nmtcars |> filter(mpg > mean(mpg) & gear == 4)\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nHowever, when working with data masked variables, it is somewhat challenging to create functions and loops. It will usually throw an error if you try to use the data masked variables as is without manipulation. Suppose you wanted to create histogram of each variable in a dataset. You may do so by creating a histogram one by one. However, a more efficient way to complete this task would be to come up with some kind of a loop or a function. Here is an example attempt:\n\nfor (var in names(mtcars)){\n  plots <- mtcars |> ggplot(aes(x = var)) + geom_histogram()\n  print(plots)\n}\n\nError in `f()`:\n! StatBin requires a continuous x variable: the x variable is discrete.Perhaps you want stat=\"count\"?\n\n\n\n\n\nThe above code throws an error - the part aes(x = var) does not recognize the variable names we supplied to the function. var is just the names of the variables in mtcars stored in strings. To resolve this error, we need to access the masked variables. We can do so by indexing the .data pronoun with the variable names. The syntax would be .data[[varname]].\n\n\nfor (var in names(mtcars)){\n  plots1 <- mtcars |> ggplot(aes(x = .data[[var]])) + geom_histogram()\n  print(plots1)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(reference: vignette(\"programming\") )\n\n\n3.1.4 How to effectively use dplyr::across()\nIt is tedious to copy same line of code for same operation across multiple columns. In dplyr package, the function across() allows the same operation to be carried on multiple columns without having to copy. Let’s examine the function first.\nacross(.cols = everything(), .fns = NULL)\n\n.cols: this argument selects the columns you want to do the operation. You would usually use the vector constructor c() to select columns, but also you can use the tidy-select helpers (starts_with(), contains(), where(), etc.) The where() helper is particularly useful.\n.fns: this argument takes a function, or list of functions, you want to apply. You can use a regular names function such as mean(), a purrr style lambda (formula) to create a function on the fly (e.g. ~.x * 2), or a list of functions/lambdas, e.g. list(avg = mean(), double = ~.x * 2). If you prefer, you can also create a custom anonymous function like function(x) {…}\n\nExample use:\nSuppose you wanted to change the data types of multiple columns, say from integer to character. A naive approach to do the task would be something like this:\n\nstorms |> select(where(is.integer)) |> lapply(typeof)\n\n$day\n[1] \"integer\"\n\n$wind\n[1] \"integer\"\n\n$pressure\n[1] \"integer\"\n\n$tropicalstorm_force_diameter\n[1] \"integer\"\n\n$hurricane_force_diameter\n[1] \"integer\"\n\nstorms |> \n  mutate(\n    day = as.character(day),\n    wind = as.character(wind),\n    pressure = as.character(pressure),\n    tropicalstorm_force_diameter = as.character(tropicalstorm_force_diameter),\n    hurricane_force_diameter = as.character(hurricane_force_diameter)\n)\n\n# A tibble: 11,859 × 13\n   name   year month day    hour   lat  long status        categ…¹ wind  press…²\n   <chr> <dbl> <dbl> <chr> <dbl> <dbl> <dbl> <chr>         <ord>   <chr> <chr>  \n 1 Amy    1975     6 27        0  27.5 -79   tropical dep… -1      25    1013   \n 2 Amy    1975     6 27        6  28.5 -79   tropical dep… -1      25    1013   \n 3 Amy    1975     6 27       12  29.5 -79   tropical dep… -1      25    1013   \n 4 Amy    1975     6 27       18  30.5 -79   tropical dep… -1      25    1013   \n 5 Amy    1975     6 28        0  31.5 -78.8 tropical dep… -1      25    1012   \n 6 Amy    1975     6 28        6  32.4 -78.7 tropical dep… -1      25    1012   \n 7 Amy    1975     6 28       12  33.3 -78   tropical dep… -1      25    1011   \n 8 Amy    1975     6 28       18  34   -77   tropical dep… -1      30    1006   \n 9 Amy    1975     6 29        0  34.4 -75.8 tropical sto… 0       35    1004   \n10 Amy    1975     6 29        6  34   -74.8 tropical sto… 0       40    1002   \n# … with 11,849 more rows, 2 more variables:\n#   tropicalstorm_force_diameter <chr>, hurricane_force_diameter <chr>, and\n#   abbreviated variable names ¹​category, ²​pressure\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n\n\n\nstorms |> \n  mutate(across(where(is.integer), ~as.character(.x)))\n\n# A tibble: 11,859 × 13\n   name   year month day    hour   lat  long status        categ…¹ wind  press…²\n   <chr> <dbl> <dbl> <chr> <dbl> <dbl> <dbl> <chr>         <ord>   <chr> <chr>  \n 1 Amy    1975     6 27        0  27.5 -79   tropical dep… -1      25    1013   \n 2 Amy    1975     6 27        6  28.5 -79   tropical dep… -1      25    1013   \n 3 Amy    1975     6 27       12  29.5 -79   tropical dep… -1      25    1013   \n 4 Amy    1975     6 27       18  30.5 -79   tropical dep… -1      25    1013   \n 5 Amy    1975     6 28        0  31.5 -78.8 tropical dep… -1      25    1012   \n 6 Amy    1975     6 28        6  32.4 -78.7 tropical dep… -1      25    1012   \n 7 Amy    1975     6 28       12  33.3 -78   tropical dep… -1      25    1011   \n 8 Amy    1975     6 28       18  34   -77   tropical dep… -1      30    1006   \n 9 Amy    1975     6 29        0  34.4 -75.8 tropical sto… 0       35    1004   \n10 Amy    1975     6 29        6  34   -74.8 tropical sto… 0       40    1002   \n# … with 11,849 more rows, 2 more variables:\n#   tropicalstorm_force_diameter <chr>, hurricane_force_diameter <chr>, and\n#   abbreviated variable names ¹​category, ²​pressure\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n\n\n(reference: vignette(\"colwise\"))"
  },
  {
    "objectID": "stats.html#variable-types",
    "href": "stats.html#variable-types",
    "title": "4  Basic Statistics",
    "section": "4.1 Variable types",
    "text": "4.1 Variable types\n\nCategorical - a categorical variable is a variable that has one or more categories. It can be a binary variable (e.g. yes/no question) or a non-binary variable (e.g. hair color with categories “red”, “blonde”, “brown”, etc.)\na. Nominal - a nominal variable is a categorical variable where the ordering of categories does not matter. An example would be the hair color variable from above.\nb. Ordinal - For ordinal variables, the ordering of categories matter. For example, service rating with categories “excellent”, “satisfactory”, and “bad” would be ordinal. In this case there is natural ordering between the categories “excellent” being the highest service rating and “bad” being the lowest.\nNumeric - a numeric variable is a variable that is quantifiable. i.e. the values must be numbers.\na. Interval - in simple terms, an interval variable is the one where the intervals between the values are equally spaced. That is, difference between two values is meaningful. Also there is ordering of the values. For example, temperature is an interval variable. 1. there is ordering, higher temperature means warmer weather. 2. The difference between two values mean the same magnitude of difference across different intervals. The difference between 36 and 37 degrees means 1 degree difference in the magnitude of warmth/coldness. This 1 degree difference represents the same magnitude on any other intervals. (e.g. 40 and 41, 59 and 60, etc.)\nAnother characteristic of interval variable is that the meaning of zero can be different by scales. For instance, on the Celsius scale, 0 is the freezing point; on the Fahrenheit scale, the 0 is 32 degrees below the freezing point.\nb. Ratio - a ratio variable has is basically the same as interval variable except that it has a real absolute zero. That is, the zero value means there is no value for the variable being measured. Examples include weight, time in seconds, height, volume, etc.\nc. Continuous - a continuous variable is a variable with an infinite number of real values within a given interval. For example, height is a continuous variable. A person may be 181.192 cm tall or 181.14205 cm tall, etc. There is infinite number of values between 181 cm and 182 cm. A continuous varialbe includes both interval and ratio variables.\nd. Discrete - a discrete variable is a variable with a finite number of real values within a given interval. Its values are countable. An example is a person’s age. A person can be 12 years old. We don’t normally say a person is 12.5 or 12.7 years old. There is a finite number of values for a person’s age.\n\nFurther resources:\n1. UCLA\n2. Statistics Canada\n3. UTHealth"
  },
  {
    "objectID": "r_tips.html",
    "href": "r_tips.html",
    "title": "5  Useful R Programming Tips",
    "section": "",
    "text": "This section of the guidebook will discuss useful tips in R programming that would be helpful in any IIR projects. This article assumes that you have basic knowledge in R programming. If you are not familiar with R, we suggest that you read this free online book Hands-On Programming with R."
  },
  {
    "objectID": "r_tips.html#copy-a-column-from-a-data-frame-to-another-with-matching-ids",
    "href": "r_tips.html#copy-a-column-from-a-data-frame-to-another-with-matching-ids",
    "title": "5  Useful R Programming Tips",
    "section": "5.1 Copy a column from a data frame to another with matching IDs",
    "text": "5.1 Copy a column from a data frame to another with matching IDs\nSuppose you have 2 data frames that are different in size. They share the same ID’s but the number of rows are different. Your goal is to copy one column from one data frame to another and you want the ID’s to match.\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.2.2\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.2.2\n\n\n\nA <- tribble(\n  ~id, ~year, ~GPA,\n  101, 2011, 3.5,\n  102, 2010, 3.6,\n  103, 2012, 2.8,\n  104, 2017, 3.8,\n  105, 2016, 2.6,\n  101, 2019, 3.7,\n  103, 2021, 2.5\n)\n\nB <- tribble(\n  ~id, ~name, ~school,\n  104, \"Jane Doe\",\"Oakhill Academy\",\n  101, \"John Smith\", \"Faireview International School\",\n  103, \"James Lee\", \"Redwood College\",\n  102, \"Jordan Jones\", \"Lakeville University\",\n  105, \"Julia Garcia\", \"Mountainview Institute\"\n)\nA\n\n# A tibble: 7 × 3\n     id  year   GPA\n  <dbl> <dbl> <dbl>\n1   101  2011   3.5\n2   102  2010   3.6\n3   103  2012   2.8\n4   104  2017   3.8\n5   105  2016   2.6\n6   101  2019   3.7\n7   103  2021   2.5\n\nB\n\n# A tibble: 5 × 3\n     id name         school                        \n  <dbl> <chr>        <chr>                         \n1   104 Jane Doe     Oakhill Academy               \n2   101 John Smith   Faireview International School\n3   103 James Lee    Redwood College               \n4   102 Jordan Jones Lakeville University          \n5   105 Julia Garcia Mountainview Institute        \n\n\nSuppose your goal was to copy the column name from B to A only. A naive approach for this task would be to use mutate in the following way. However, this will generate an error.\n\nC <- A |> mutate(name_from_b = B[, \"name\"])\n\nError in `mutate()`:\n! Problem while computing `name_from_b = B[, \"name\"]`.\n✖ `name_from_b` must be size 7 or 1, not 5.\n\n\nSince the number of rows are different for the data frames A and B, name cannot be copied. Remember the goal is to copy the column so that the ID’s are matching. To make this work, we will use the function match and data frame indexing with brackets []. First, we will explore how the match function works.\nmatch takes in vectors and returns the indices of the first argument that matches the second argument. For instance match(x, y) would return the indices of x’s elements that are matching the elements of y in the correct order.\n\nmatch(B$id, A$id)\n\n[1] 4 1 3 2 5\n\nmatch(A$id, B$id)\n\n[1] 2 4 3 1 5 2 3\n\n\nNotice that the function still returns the indices of the matches even if the arguments of its arguments have differing lengths. If the arguments have differing lengths, the result of match will be the length of the first argument. The first example match(B$id, A$id) returns only 5 indices and these are the positions of the matches of B’s Id in A. The second example returns 7 elements in the same manner. Now we can use this to create a new vector names_from_b to be copied to A. This will be an easy task with data frame indexing using the brackets []. Inside the brackets will be the matches of A’s ID in B so that there would be 7 elements.\n\nnames_from_b <- B$name[match(A$id, B$id)]\nnames_from_b\n\n[1] \"John Smith\"   \"Jordan Jones\" \"James Lee\"    \"Jane Doe\"     \"Julia Garcia\"\n[6] \"John Smith\"   \"James Lee\"   \n\n\nThe final step is to copy this vector into A. We will store the result in a new data frame called C.\n\nC <- A |> mutate(names = names_from_b)\nC\n\n# A tibble: 7 × 4\n     id  year   GPA names       \n  <dbl> <dbl> <dbl> <chr>       \n1   101  2011   3.5 John Smith  \n2   102  2010   3.6 Jordan Jones\n3   103  2012   2.8 James Lee   \n4   104  2017   3.8 Jane Doe    \n5   105  2016   2.6 Julia Garcia\n6   101  2019   3.7 John Smith  \n7   103  2021   2.5 James Lee"
  },
  {
    "objectID": "r_tips.html#how-to-access-column-names-in-a-loop-or-a-function-with-dplyr",
    "href": "r_tips.html#how-to-access-column-names-in-a-loop-or-a-function-with-dplyr",
    "title": "5  Useful R Programming Tips",
    "section": "5.2 How to access column names in a loop or a function with dplyr",
    "text": "5.2 How to access column names in a loop or a function with dplyr\nIn base R, we need $ to refer to variables/columns of a data frame in most cases. This often leads to repetition of typing the same data frame’s name many times. For example:\n\nmtcars[mtcars$mpg > mean(mtcars$mpg) & mtcars$gear == 4,]\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nIn dplyr, a concept called data masking allows for much faster data manipulation and reduces such repetition of code. In short, data masking allows you to simply type only the name of variable instead of accessing the variable through $ operator. The code above could be reduced to this using dplyr’s filter():\n\nmtcars |> filter(mpg > mean(mpg) & gear == 4)\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nHowever, when working with data masked variables, it is somewhat challenging to create functions and loops. It will usually throw an error if you try to use the data masked variables as is without manipulation. Suppose you wanted to create histogram of each variable in a dataset. You may do so by creating a histogram one by one. However, a more efficient way to complete this task would be to come up with some kind of a loop or a function. Here is an example attempt:\n\nfor (var in names(mtcars)){\n  plots <- mtcars |> ggplot(aes(x = var)) + geom_histogram()\n  print(plots)\n}\n\nError in `geom_histogram()`:\n! Problem while computing stat.\nℹ Error occurred in the 1st layer.\nCaused by error in `setup_params()`:\n! `stat_bin()` requires a continuous x aesthetic\n✖ the x aesthetic is discrete.\nℹ Perhaps you want `stat=\"count\"`?\n\n\n\n\n\nThe above code throws an error - the part aes(x = var) does not recognize the variable names we supplied to the function. var is just the names of the variables in mtcars stored in strings. To resolve this error, we need to access the masked variables. We can do so by indexing the .data pronoun with the variable names. The syntax would be .data[[varname]].\n\n\nfor (var in names(mtcars)){\n  plots1 <- mtcars |> ggplot(aes(x = .data[[var]])) + geom_histogram()\n  print(plots1)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(reference: vignette(\"programming\") )"
  },
  {
    "objectID": "r_tips.html#how-to-effectively-use-dplyracross",
    "href": "r_tips.html#how-to-effectively-use-dplyracross",
    "title": "5  Useful R Programming Tips",
    "section": "5.3 How to effectively use dplyr::across()",
    "text": "5.3 How to effectively use dplyr::across()\nIt is tedious to copy same line of code for same operation across multiple columns. In dplyr package, the function across() allows the same operation to be carried on multiple columns without having to copy. Let’s examine the function first.\nacross(.cols = everything(), .fns = NULL)\n\n.cols: this argument selects the columns you want to do the operation. You would usually use the vector constructor c() to select columns, but also you can use the tidy-select helpers (starts_with(), contains(), where(), etc.) The where() helper is particularly useful.\n.fns: this argument takes a function, or list of functions, you want to apply. You can use a regular names function such as mean(), a purrr style lambda (formula) to create a function on the fly (e.g. ~.x * 2), or a list of functions/lambdas, e.g. list(avg = mean(), double = ~.x * 2). If you prefer, you can also create a custom anonymous function like function(x) {…}\n\nExample use:\nSuppose you wanted to change the data types of multiple columns, say from integer to character. A naive approach to do the task would be something like this:\n\nstorms |> select(where(is.integer)) |> lapply(typeof)\n\n$day\n[1] \"integer\"\n\n$wind\n[1] \"integer\"\n\n$pressure\n[1] \"integer\"\n\n$tropicalstorm_force_diameter\n[1] \"integer\"\n\n$hurricane_force_diameter\n[1] \"integer\"\n\nstorms |> \n  mutate(\n    day = as.character(day),\n    wind = as.character(wind),\n    pressure = as.character(pressure),\n    tropicalstorm_force_diameter = as.character(tropicalstorm_force_diameter),\n    hurricane_force_diameter = as.character(hurricane_force_diameter)\n)\n\n# A tibble: 11,859 × 13\n   name   year month day    hour   lat  long status        categ…¹ wind  press…²\n   <chr> <dbl> <dbl> <chr> <dbl> <dbl> <dbl> <chr>         <ord>   <chr> <chr>  \n 1 Amy    1975     6 27        0  27.5 -79   tropical dep… -1      25    1013   \n 2 Amy    1975     6 27        6  28.5 -79   tropical dep… -1      25    1013   \n 3 Amy    1975     6 27       12  29.5 -79   tropical dep… -1      25    1013   \n 4 Amy    1975     6 27       18  30.5 -79   tropical dep… -1      25    1013   \n 5 Amy    1975     6 28        0  31.5 -78.8 tropical dep… -1      25    1012   \n 6 Amy    1975     6 28        6  32.4 -78.7 tropical dep… -1      25    1012   \n 7 Amy    1975     6 28       12  33.3 -78   tropical dep… -1      25    1011   \n 8 Amy    1975     6 28       18  34   -77   tropical dep… -1      30    1006   \n 9 Amy    1975     6 29        0  34.4 -75.8 tropical sto… 0       35    1004   \n10 Amy    1975     6 29        6  34   -74.8 tropical sto… 0       40    1002   \n# … with 11,849 more rows, 2 more variables:\n#   tropicalstorm_force_diameter <chr>, hurricane_force_diameter <chr>, and\n#   abbreviated variable names ¹​category, ²​pressure\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n\n\n\nstorms |> \n  mutate(across(where(is.integer), ~as.character(.x)))\n\n# A tibble: 11,859 × 13\n   name   year month day    hour   lat  long status        categ…¹ wind  press…²\n   <chr> <dbl> <dbl> <chr> <dbl> <dbl> <dbl> <chr>         <ord>   <chr> <chr>  \n 1 Amy    1975     6 27        0  27.5 -79   tropical dep… -1      25    1013   \n 2 Amy    1975     6 27        6  28.5 -79   tropical dep… -1      25    1013   \n 3 Amy    1975     6 27       12  29.5 -79   tropical dep… -1      25    1013   \n 4 Amy    1975     6 27       18  30.5 -79   tropical dep… -1      25    1013   \n 5 Amy    1975     6 28        0  31.5 -78.8 tropical dep… -1      25    1012   \n 6 Amy    1975     6 28        6  32.4 -78.7 tropical dep… -1      25    1012   \n 7 Amy    1975     6 28       12  33.3 -78   tropical dep… -1      25    1011   \n 8 Amy    1975     6 28       18  34   -77   tropical dep… -1      30    1006   \n 9 Amy    1975     6 29        0  34.4 -75.8 tropical sto… 0       35    1004   \n10 Amy    1975     6 29        6  34   -74.8 tropical sto… 0       40    1002   \n# … with 11,849 more rows, 2 more variables:\n#   tropicalstorm_force_diameter <chr>, hurricane_force_diameter <chr>, and\n#   abbreviated variable names ¹​category, ²​pressure\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names\n\n\n(reference: vignette(\"colwise\"))"
  },
  {
    "objectID": "iir_study_cycle.html#project-start-up",
    "href": "iir_study_cycle.html#project-start-up",
    "title": "2.1 IIR Study Cycle",
    "section": "Project Start Up",
    "text": "Project Start Up\n\nIdea is propose and is sent to either Larissa Stanberry or Ross Garberich. IIR project request form is filled out. IIR project intake form is filled out. Study budget form is filled out.\nProposal Gets sent to Sub-Committee Member. Gets approved by Sub-committee member. If not approved, review action items, communicate with PI and resubmit if PI desires.\nIRB Submission. Typically research associates will complete this.\nIRB Approved. Study Starts.\n\n\nData\n\nREDCap or Excel created to manage the data. Work with scientific services team (IIR Team) for building of REDCap if needed.\nDetermine source of the data.\nCollect data and store in either REDCap or Excel, based on the project protocol.\n\n\n\nStats\n\nCollected Data is handed off to Biostatisticians.\nMeet regularly with the Stats team to discuss findings, tables, graphs, figures, etc…\n\n\n\nPublication\n\nManuscript/Abstract Writing is done here.\nConsult with research team about findings and message. Submit to desired journal.\n\n\n\nDissemination\n\nOnce published, the manuscript/abstract will be collected into our data base for dissemination.\nPresentations at conferences may also be an opportunity for dissemination of the project."
  },
  {
    "objectID": "refIRBPrep.html#psd-project-specific-disclosure",
    "href": "refIRBPrep.html#psd-project-specific-disclosure",
    "title": "2  IRB Preparation",
    "section": "2.4 PSD (Project Specific Disclosure)",
    "text": "2.4 PSD (Project Specific Disclosure)\nNB The PSD form is no longer required for submission unless specifically requested by the IRB.\n1. Download from IRBnet.org: Forms and Templates -> Form – COI – Project Specific Disclosure Form.\n\n\n\nPSD Form on IRBnet.org\n\n\n2. Fill in Study Title and PI.\n3. Email to PI to fill out. Most answers will be NA or No, except to the last question, which should be a yes. However, there could be a test article, etc.\n4. Save to the project folder in “1 IRB Submissions.”"
  },
  {
    "objectID": "refIRBPrep.html#iir-pi-attestation",
    "href": "refIRBPrep.html#iir-pi-attestation",
    "title": "2  IRB Preparation",
    "section": "2.5 IIR PI Attestation",
    "text": "2.5 IIR PI Attestation\n1. A template for the IIR PI Attestation should be pre-populated in the project folder under “1 IRB Submissions.” If there is no template in the project folder, a blank PI Attestation can be found in the S-drive under Metro -> ANW -> Research -> Coordinator & Regulatory Resources -> Templates - All Types -> IIR Templates, Checklists and other Tools -> New Study Applications -> IIR PI Attestation.docx.\n2. Fill in study title and PI.\n3. Print form and place in a folder. On the outside of the folder, include the PI’s name and your own. For example, “To: Dr. Eckman” and “Please return to Ronald Thao, 6th floor.”\n4. Give the form to Svetlana. She will deliver it to the PI for his/her signature and will return it when it has been signed.\n5. Scan the form to a PDF and save to the project folder in “1 IRB Submissions.”"
  },
  {
    "objectID": "refIRBPrep.html#memo-of-acknowledgement-moa",
    "href": "refIRBPrep.html#memo-of-acknowledgement-moa",
    "title": "2  IRB Preparation",
    "section": "2.6 Memo of Acknowledgement (MOA)",
    "text": "2.6 Memo of Acknowledgement (MOA)\n1. A template for the MOA should be pre-populated in the project folder under “1 IRB Submissions.” If there is no template in the project folder, a blank MOA can be found in the S-drive under Metro -> ANW -> Research -> Coordinator & Regulatory Resources -> Templates - All Types -> IIR Templates, Checklists and other Tools -> New Study Applications -> IIR MOA_Blank.docx.\n2. Fill in study title and PI.\n3. Email the signable PDF MOA to Kris Fortman. Title the email “MOA Signature Required” and include a study synopsis. The synopsis can be taken from the following sections of the protocol:\n\nIntroduction - Background and Rationale\nStudy Objectives, Purpose, or Study Aims\nStudy Design\n\n4. Upon receipt of the signed MOA, save to the project folder in “1 IRB Submissions.”"
  },
  {
    "objectID": "refIRBPrep.html#doa-delegation-of-authority",
    "href": "refIRBPrep.html#doa-delegation-of-authority",
    "title": "2  IRB Preparation",
    "section": "2.7 DOA (Delegation of Authority)",
    "text": "2.7 DOA (Delegation of Authority)\n1. A template for the DOA should be pre-populated in the project folder under “3 Protocol, DOA.” If there is no template in the project folder, a blank DOA can be found in the S-drive under Metro -> ANW -> Research -> Coordinator & Regulatory Resources -> Templates - All Types -> IIR Templates, Checklists and other Tools -> DOA Template and Work Standard -> DOA General IIR retro blank.doc.\n2. Add study name and sponsor.\n3. Add PI and other co-investigators listed on the intake form.\n4. Add the study coordinator (refer to previous projects for the PI to see who their coordinator typically is).\n5. Add IIR team as RAs.\n6. Add regulatory team as REG.\n7. Code each participant’s role as described below:\n\nThe PI should be listed as “PI” with tasks 1, 2, 3, 4\nOther MHI Physicians should be listed as “Co-I” with tasks 1, 2, 3, 4\nThe research coordinator should be listed as “RC” with task 1\nResearch scholars and research associates should be listed as “RA” with tasks 2, 3, 4\nRoss, Larissa, and biostatisticians should be listed as “RA” with tasks 2, 3, 4, 5\nThe regulatory team should be listed as “REG” with tasks 18, 19\n\n8. Save completed form to project folder in “3 Protocol, DOA.”"
  },
  {
    "objectID": "stats_workflow.html",
    "href": "stats_workflow.html",
    "title": "3  Statistics Workflow",
    "section": "",
    "text": "We have a shared drive where we store all the project-related files. The drive is called S Drive. In this directory you can look up the project details by the PI’s last name. For some projects the data spreadsheets are sored in a directory called Data Management.\nIn general project directory follows the following path format:\nS:\\Metro\\ANW\\Research\\Investigator Initiated Research\\PROJECTS\\{PI_name}\\{project_name}\nExample of data file in a Data Management directory:\n\n\n(Please be cautious when looking at the data files for the projects other than the ones you’re working on. You may not be allowed to inspect the data unless they are de-identified.)\nIf you want to look at some project background information, project protocols might be useful.\nThe working files for your project should go in the STATISTICS folder in this path: S:\\Metro\\ANW\\Research\\Investigator Initiated Research\\PROJECTS\\STATISTICS. If you’re working on your project for the first time, you may have to create your project folder. The next section will discuss how to do so."
  },
  {
    "objectID": "stats_workflow.html#setting-up-the-project-environment",
    "href": "stats_workflow.html#setting-up-the-project-environment",
    "title": "3  Statistics Workflow",
    "section": "3.2 Setting up the project environment",
    "text": "3.2 Setting up the project environment\n\nCreate your project directories. Generally, there should already be a directory in STATISTICS folder for your project PI, but in case the folder is not there, create a folder with the PI’s last name.\n\nWithin this folder, create a directory with your project name.\n\nCopy the project template folders from S:\\Metro\\ANW\\Research\\Investigator Initiated Research\\PROJECTS\\STATISTICS\\2. Project Folder. Paste these folders into your project directory.\n\nThe project template folders should include the following directories:\n\nData - Store all the data files here. (e.g. .csv, .xlsx, data dictionaries, etc.)\nPaper - Store the papers related to your project such as previous studies.\nPix - Store all the figures and plots you created for the project.\nRcode - Store your code for the project here (.Rmd, .R). You may also include the reports you created from your code.\nRefs - Store the resources and documents you referenced for the project.\nResults - Store the tables and analysis results you created here. The tables are usually in the .rtf format.\nMiscDocs - Store all other files here. For example your personal notes for the projects, analysis plans, etc."
  },
  {
    "objectID": "stats_workflow.html#manage-your-code-in-rstudio.",
    "href": "stats_workflow.html#manage-your-code-in-rstudio.",
    "title": "3  Statistics Workflow",
    "section": "3.3 Manage your code in RStudio.",
    "text": "3.3 Manage your code in RStudio.\nIt is generally recommended to use .Rmd files for your project code. First you should create an R project file (.Rproj) to manage your code.\n\nOpen up your RStudio and create a new project (File -> New Project…). Then choose Existing Directory and choose your project folder. Click on Create project.\n\n\nYou should see that your new R project file is created with your project directory name.\n\nCreate your first .Rmd file. In your project environment you can use the Files tab to manage your files at the bottom right corner (the layout might depend on how you set up your RStudio window). Click on File -> New File -> R Markdown… You should be prompted to this window. Name the tile your project name and leave others as is for now. You can directly change the author and dates in your .Rmd file.\n\nAutomatically update the date to the current one. You should see at the top the date parameter is set to the current date. To automatically update it, replace it with this code “r Sys.Date()”. This will make sure that even if you forget to change the date, the date on your report will be the current date.\nSet the working directory to your project directory. Oftentimes working between projects, you may have to change the working directory of your current RStudio environment. Insert the following code chunk to your .Rmd file to set the working directory to your project directory. Be sure to change PI_name and project_name in the path according to your project. The code chunk should have the following option as well to avoid the output of the chunk showing up on your report. ```{r setup include=F} …your code…```\n\n\nknitr::opts_chunk$set(echo = FALSE, cache = F, warning = F, message = F)\nknitr::opts_knit$set(root.dir = \"S:/Metro/ANW/Research/Investigator Initiated Research/PROJECTS/STATISTICS/{PI_name}/{project_name}\")\n\n\nChange your ggplot theme to MHIF specific theme. MHIF uses a specific theme for plots. Insert the following code chunk to set the theme.\n\n\nlibrary(ggplot2)\nsource('S:/Metro/ANW/Research/Investigator Initiated Research/PROJECTS/STATISTICS/IIR/Rfunctions/theme_mhif.R')\ntheme_set(theme_mhif())\n\nOnce you have finished all the initial settings, save the file (File -> Save). The naming convention for .Rmd files is report_PI_name_project_name_mmddyy.Rmd (You can see the example files here: S:\\Metro\\ANW\\Research\\Investigator Initiated Research\\PROJECTS\\STATISTICS\\example PI)"
  },
  {
    "objectID": "stats.html#descriptive-statistics-mean-median-mode",
    "href": "stats.html#descriptive-statistics-mean-median-mode",
    "title": "4  Basic Statistics",
    "section": "4.2 Descriptive Statistics (Mean, Median, Mode)",
    "text": "4.2 Descriptive Statistics (Mean, Median, Mode)\nThe mean, median and mode are all measures of central tendency.\nFurthre resources:\n1. Purdue Univ."
  }
]